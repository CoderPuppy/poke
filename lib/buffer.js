// Generated by LiveScript 1.2.0
(function(){
  var Cursor, OP, Buffer, exports;
  Cursor = require('./cursor');
  OP = require('./ops');
  Buffer = (function(){
    Buffer.displayName = 'Buffer';
    var prototype = Buffer.prototype, constructor = Buffer;
    function Buffer(poke, index, _name, lines){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.poke = poke;
      this$.index = index;
      this$._name = _name;
      this$.lines = lines != null
        ? lines
        : [""];
      this$['delete'] = bind$(this$, 'delete', prototype);
      this$.insert = bind$(this$, 'insert', prototype);
      this$.uncommit = bind$(this$, 'uncommit', prototype);
      this$.commit = bind$(this$, 'commit', prototype);
      this$.fullHistory = bind$(this$, 'fullHistory', prototype);
      this$.undo = bind$(this$, 'undo', prototype);
      this$.apply = bind$(this$, 'apply', prototype);
      this$._parsePos = bind$(this$, '_parsePos', prototype);
      this$.line = bind$(this$, 'line', prototype);
      this$.name = bind$(this$, 'name', prototype);
      this$.cursors = [Cursor(this$, 1, 1)];
      this$.history = [];
      this$.historyIndex = -1;
      this$.commits = [this$.history];
      this$.commitIndex = 0;
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.name = function(){
      return this._name || this.lines[0];
    };
    prototype.line = function(i){
      return this.lines[i] || "";
    };
    prototype._parsePos = function(x, y){
      if (y === 'end') {
        y = this.lines.length - 1;
      }
      if (y === 'home') {
        y = 0;
      }
      if (y < 0) {
        y += this.lines.length;
      }
      if (x === 'end') {
        x = this.lines[y].length;
      }
      if (x === 'home') {
        x = 0;
      }
      if (x < 0) {
        x += this.lines[y].length;
      }
      return [x, y];
    };
    prototype.apply = function(op){
      this.history.push([op, op.apply(this)]);
      this.historyIndex += 1;
      return this;
    };
    prototype.undo = function(){
      var hist;
      if (this.history.length <= 0 || this.historyIndex < 0) {
        this.uncommit();
        while (this.historyIndex > -1) {
          this.undo();
        }
      } else {
        hist = this.history[this.historyIndex];
        hist[0].unapply(this, hist[1]);
        this.historyIndex -= 1;
      }
      return this;
    };
    prototype.fullHistory = function(){
      var commit, op;
      return this.history.concat((function(){
        var i$, ref$, len$, j$, ref1$, len1$, results$ = [];
        for (i$ = 0, len$ = (ref$ = this.commits).length; i$ < len$; ++i$) {
          commit = ref$[i$];
          for (j$ = 0, len1$ = (ref1$ = commit).length; j$ < len1$; ++j$) {
            op = ref1$[j$];
            results$.push(op);
          }
        }
        return results$;
      }.call(this)));
    };
    prototype.commit = function(){
      this.history = [];
      this.historyIndex = -1;
      this.commits.push(this.history);
      this.commitIndex += 1;
      return this;
    };
    prototype.uncommit = function(){
      var commit;
      while (this.historyIndex > -1) {
        this.undo();
      }
      if (this.commitIndex < 1) {
        throw new Error("No commit to uncommit");
      }
      this.commitIndex -= 1;
      commit = this.commits[this.commitIndex];
      this.history = commit;
      this.historyIndex = commit.length - 1;
      return this;
    };
    prototype.insert = function(x, y, text){
      return this.apply(OP.insert(x, y, text));
    };
    prototype['delete'] = function(x, y, length){
      return this.apply(OP['delete'](x, y, length));
    };
    return Buffer;
  }());
  exports = module.exports = Buffer;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
