// Generated by LiveScript 1.2.0
(function(){
  var TBuffer, Buffer, exports, slice$ = [].slice;
  TBuffer = require('./tbuffer');
  Buffer = (function(superclass){
    var prototype = extend$((import$(Buffer, superclass).displayName = 'Buffer', Buffer), superclass).prototype, constructor = Buffer;
    function Buffer(poke, index, _name, _lines){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$._name = _name;
      this$._lines = _lines != null
        ? _lines
        : [""];
      this$.deleteImpl = bind$(this$, 'deleteImpl', prototype);
      this$.insertImpl = bind$(this$, 'insertImpl', prototype);
      this$.lines = bind$(this$, 'lines', prototype);
      this$.name = bind$(this$, 'name', prototype);
      Buffer.superclass.call(this$, poke, index);
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.name = function(){
      return this._name || this._lines[0];
    };
    prototype.lines = function(){
      return this._lines;
    };
    prototype.insertImpl = function(x, y, lines){
      var text, line, ref$;
      text = lines[0];
      line = this.line(y);
      this._lines[y] = line.substr(0, x) + text;
      if (lines.length > 1) {
        lines[1] += line.substr(x);
      } else {
        this._lines[y] += line.substr(x);
      }
      return (ref$ = this._lines).splice.apply(ref$, [y + 1, 0].concat(slice$.call(lines.slice(1))));
    };
    prototype.deleteImpl = function(x, y, length){
      var deleted, line;
      deleted = "";
      while (length > 0) {
        line = this.line(y);
        if (length > line.length - x && this._lines.length - 1 > y) {
          length -= line.length - x + 1;
          deleted += line.substr(x) + "\n";
          this._lines[y] = line.substr(0, x) + buffer.lines[y + 1];
          this._lines.splice(y + 1, 1);
        } else {
          deleted += line.substr(x, x + length);
          this._lines[y] = line.substr(0, x) + line.substr(x + length);
          length = 0;
        }
      }
      line = this._lines[y];
      this._lines[y] = line.substr(0, x) + line.substr(x + length);
      return deleted;
    };
    return Buffer;
  }(TBuffer));
  exports = module.exports = Buffer;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
