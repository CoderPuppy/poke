// Generated by LiveScript 1.2.0
(function(){
  var Cursor, Buffer, exports, slice$ = [].slice;
  Cursor = require('./cursor');
  Buffer = (function(){
    Buffer.displayName = 'Buffer';
    var prototype = Buffer.prototype, constructor = Buffer;
    function Buffer(poke, index, _name, lines){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.poke = poke;
      this$.index = index;
      this$._name = _name;
      this$.lines = lines != null
        ? lines
        : [""];
      this$['delete'] = bind$(this$, 'delete', prototype);
      this$.insert = bind$(this$, 'insert', prototype);
      this$._parsePos = bind$(this$, '_parsePos', prototype);
      this$.line = bind$(this$, 'line', prototype);
      this$.name = bind$(this$, 'name', prototype);
      this$.cursors = [Cursor(this$, 1, 1)];
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.name = function(){
      return this._name || this.lines[0];
    };
    prototype.line = function(i){
      return this.lines[i] || "";
    };
    prototype._parsePos = function(x, y){
      if (y === 'end') {
        y = this.lines.length - 1;
      }
      if (y === 'home') {
        y = 0;
      }
      if (y < 0) {
        y += this.lines.length;
      }
      if (x === 'end') {
        x = this.lines[y].length;
      }
      if (x === 'home') {
        x = 0;
      }
      if (x < 0) {
        x += this.lines[y].length;
      }
      return [x, y];
    };
    prototype.insert = function(x, y, text){
      var ref$, lines, line;
      ref$ = this._parsePos(x, y), x = ref$[0], y = ref$[1];
      lines = text.split(/[\n\r]/g);
      text = lines[0];
      line = this.lines[y];
      this.lines[y] = line.substr(0, x) + text;
      if (lines.length > 1) {
        lines[1] += line.substr(x);
      } else {
        this.lines[y] += line.substr(x);
      }
      (ref$ = this.lines).splice.apply(ref$, [y + 1, 0].concat(slice$.call(lines.slice(1))));
      return this;
    };
    prototype['delete'] = function(x, y, length){
      var ref$, line;
      length == null && (length = 1);
      ref$ = this._parsePos(x, y), x = ref$[0], y = ref$[1];
      if (length === 'all') {
        length = Infinity;
      }
      while (length > 0) {
        line = this.lines[y];
        if (length > line.length - x && this.lines.length - 1 > y) {
          length -= line.length - x + 1;
          this.lines[y] = line.substr(0, x) + this.lines[y + 1];
          this.lines.splice(y + 1, 1);
        } else {
          this.lines[y] = line.substr(0, x) + line.substr(x + length);
          length = 0;
        }
      }
      line = this.lines[y];
      this.lines[y] = line.substr(0, x) + line.substr(x + length);
      return this;
    };
    return Buffer;
  }());
  exports = module.exports = Buffer;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
