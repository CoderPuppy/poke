// Generated by LiveScript 1.2.0
(function(){
  var charms, keypress, ansirecover, twil, Twil, TermUI, exports;
  charms = require('charm');
  keypress = require('keypress');
  ansirecover = require('ansi-recover');
  twil = Twil = (function(){
    Twil.displayName = 'Twil';
    var Obj, prototype = Twil.prototype, constructor = Twil;
    function Twil(def){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.def = def;
      this$.update = bind$(this$, 'update', prototype);
      this$.redraw = bind$(this$, 'redraw', prototype);
      this$.cursor = bind$(this$, 'cursor', prototype);
      this$.charm = charms(process.stdin, process.stdout);
      this$.charm.reset();
      this$.update();
      process.stdout.on('resize', function(){
        this$.update();
        return this$.redraw();
      });
      ansirecover({
        cursor: false,
        mouse: true
      });
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.cursor = function(cb){
      return this.charm.position(cb);
    };
    prototype.redraw = function(x, y){
      var i$, ref$, len$, obj, results$ = [];
      if (x != null && y != null) {
        this.charm.position(x, y);
        this.charm.write(' ');
        for (i$ = 0, len$ = (ref$ = this.objs).length; i$ < len$; ++i$) {
          obj = ref$[i$];
          if (x >= obj._x && y >= obj._y && x <= obj._x + obj.width && y <= obj._y + obj.height) {
            results$.push(obj.redraw());
          }
        }
        return results$;
      } else {
        this.charm.erase('screen');
        for (i$ = 0, len$ = (ref$ = this.objs).length; i$ < len$; ++i$) {
          obj = ref$[i$];
          results$.push(obj.redraw(false));
        }
        return results$;
      }
    };
    prototype.update = function(){
      var i$, ref$, len$, obj, this$ = this;
      this.objs = [];
      this.def.call(null, function(x, y, text){
        return this$.objs.push(new Twil.Obj(this$, x, y, text));
      });
      for (i$ = 0, len$ = (ref$ = this.objs).length; i$ < len$; ++i$) {
        obj = ref$[i$];
        obj.update();
      }
      return this;
    };
    Twil.Obj = Obj = (function(){
      Obj.displayName = 'Obj';
      var prototype = Obj.prototype, constructor = Obj;
      function Obj(ui, x, y, text){
        var this$ = this instanceof ctor$ ? this : new ctor$;
        this$.ui = ui;
        this$.x = x;
        this$.y = y;
        this$.text = text;
        this$.update = bind$(this$, 'update', prototype);
        this$.redraw = bind$(this$, 'redraw', prototype);
        return this$;
      } function ctor$(){} ctor$.prototype = prototype;
      prototype.redraw = function(clear){
        var i$, to$, y;
        clear == null && (clear = true);
        if (this._oldX !== this._x || this._oldY !== this._y || this._oldWidth !== this.width || this._oldHeight !== this.height || this._oldText !== this._text) {
          if (clear && (this._oldWidth != null && this._oldHeight != null && this._oldX != null && this._oldY != null)) {
            for (i$ = this._oldY, to$ = this._oldY + this._oldHeight; i$ <= to$; ++i$) {
              y = i$;
              this.ui.charm.position(this._oldX(y));
              this.ui.charm.write(repeatString$(" ", this._oldWidth));
            }
          }
          this.ui.charm.position(this._x, this._y);
          return this.ui.charm.write(this._text);
        }
      };
      prototype.update = function(){
        this._oldX = this._x;
        this._oldY = this._y;
        this._oldWidth = this.width;
        this._oldHeight = this.height;
        this._oldText = this._text;
        if (typeof this.x === 'function') {
          this._x = this.x();
        } else {
          this._x = this.x;
        }
        if (typeof this.y === 'function') {
          this._y = this.y();
        } else {
          this._y = this.y;
        }
        if (typeof this.text === 'function') {
          this._text = this.text();
        } else {
          this._text = this.text.toString();
        }
        this.width = this._text.length;
        this.height = this._text.split(/[\n\r]/g).length;
        return this;
      };
      return Obj;
    }());
    return Twil;
  }());
  TermUI = (function(){
    TermUI.displayName = 'TermUI';
    var prototype = TermUI.prototype, constructor = TermUI;
    function TermUI(poke, styles){
      var rs, ws, this$ = this instanceof ctor$ ? this : new ctor$;
      this$.poke = poke;
      this$.styles = styles;
      this$.redraw = bind$(this$, 'redraw', prototype);
      this$._setStyle = bind$(this$, '_setStyle', prototype);
      rs = process.stdin;
      ws = process.stdout;
      this$.ui = twil(function(def){
        def(1, 1, function(){
          return " -- " + this$.poke.activeBuffer.name();
        });
        return def(1, 2, function(){
          return this$.poke.activeBuffer.lines.map(function(line, i){
            return "  " + i + " " + line;
          }).join('\n');
        });
      });
      this$.width = ws.columns;
      this$.height = ws.rows;
      this$.textX = 1;
      this$.textY = 1;
      this$.scrollV = 0;
      this$.scrollH = 0;
      keypress(rs);
      keypress.enableMouse(ws);
      rs.setRawMode(true);
      rs.resume();
      rs.on('keypress', function(ch, key){
        if (key && key.ctrl && key.name === 'c') {
          rs.pause();
        }
        return this$.ui.cursor(function(cx, cy){
          return this$.ui.redraw(cx - 1, cy);
        });
      });
      rs.on('end', function(){
        return keypress.disableMouse(ws);
      });
      this$.ui.redraw();
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype._setStyle = function(style){
      var i$, ref$, len$, disp, results$ = [];
      this.charm.display('reset');
      if (style.foreground != null) {
        this.charm.foreground(style.foreground);
      }
      if (style.background != null) {
        this.charm.background(style.background);
      }
      for (i$ = 0, len$ = (ref$ = style.display).length; i$ < len$; ++i$) {
        disp = ref$[i$];
        results$.push(this.charm.display(disp));
      }
      return results$;
    };
    prototype.redraw = function(){
      var buffer, gutter, res$, i$, to$, line, gutterWidth, i, results$ = [];
      this.charm.reset();
      buffer = this.poke.activeBuffer;
      res$ = [];
      for (i$ = this.scrollV, to$ = this.height - this.textY - 1 + this.scrollV; i$ <= to$; ++i$) {
        line = i$;
        res$.push((line + 1).toString());
      }
      gutter = res$;
      gutterWidth = Math.max.apply(Math, gutter.map(function(it){
        return it.length;
      })) + 2;
      for (i$ = this.scrollV, to$ = this.height - this.textY - 1 + this.scrollV; i$ <= to$; ++i$) {
        i = i$;
        this.charm.position(this.textX, i + this.textY);
        if (buffer.lines[i] != null) {
          this._setStyle(this.styles.gutterLinenum);
          this.charm.write(repeatString$(" ", gutterWidth - gutter[i].length - 1));
          this.charm.write(gutter[i] + " ");
        } else {
          this._setStyle(this.styles.gutterNoline);
          this.charm.write("~");
          this.charm.write(repeatString$(" ", gutterWidth - 1));
        }
        this._setStyle(this.styles.text);
        results$.push(this.charm.write(buffer.line(i).substr(this.scrollH)));
      }
      return results$;
    };
    return TermUI;
  }());
  exports = module.exports = TermUI;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
