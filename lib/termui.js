// Generated by LiveScript 1.2.0
(function(){
  var charms, keypress, TermUI, exports;
  charms = require('charm');
  keypress = require('keypress');
  TermUI = (function(){
    TermUI.displayName = 'TermUI';
    var prototype = TermUI.prototype, constructor = TermUI;
    function TermUI(poke, styles, readable, writable){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.poke = poke;
      this$.styles = styles;
      this$.readable = readable;
      this$.writable = writable;
      this$.redraw = bind$(this$, 'redraw', prototype);
      this$._setStyle = bind$(this$, '_setStyle', prototype);
      this$.charm = charms(this$.readable, this$.writable);
      this$.charm.reset();
      this$.charm.position(1, 1);
      this$.width = this$.writable.columns;
      this$.height = this$.writable.rows;
      this$.textX = 1;
      this$.textY = 1;
      this$.scrollV = 0;
      this$.scrollH = 0;
      this$.redraw();
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype._setStyle = function(style){
      var i$, ref$, len$, disp, results$ = [];
      this.charm.display('reset');
      if (style.foreground != null) {
        this.charm.foreground(style.foreground);
      }
      if (style.background != null) {
        this.charm.background(style.background);
      }
      for (i$ = 0, len$ = (ref$ = style.display).length; i$ < len$; ++i$) {
        disp = ref$[i$];
        results$.push(this.charm.display(disp));
      }
      return results$;
    };
    prototype.redraw = function(){
      var buffer, gutter, res$, i$, to$, line, gutterWidth, i, results$ = [];
      buffer = this.poke.activeBuffer;
      res$ = [];
      for (i$ = this.scrollV, to$ = this.height - this.textY - 1 + this.scrollV; i$ <= to$; ++i$) {
        line = i$;
        res$.push((line + 1).toString());
      }
      gutter = res$;
      gutterWidth = Math.max.apply(Math, gutter.map(function(it){
        return it.length;
      })) + 2;
      for (i$ = this.scrollV, to$ = this.height - this.textY - 1 + this.scrollV; i$ <= to$; ++i$) {
        i = i$;
        this.charm.position(this.textX, i + this.textY);
        if (buffer.lines[i] != null) {
          this._setStyle(this.styles.gutterLinenum);
          this.charm.write(repeatString$(" ", gutterWidth - gutter[i].length - 1));
          this.charm.write(gutter[i] + " ");
        } else {
          this._setStyle(this.styles.gutterNoline);
          this.charm.write("~");
          this.charm.write(repeatString$(" ", gutterWidth - 1));
        }
        this._setStyle(this.styles.text);
        results$.push(this.charm.write(buffer.line(i).substr(this.scrollH)));
      }
      return results$;
    };
    return TermUI;
  }());
  exports = module.exports = TermUI;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
