// Generated by LiveScript 1.2.0
/*

*/
(function(){
  var InputManager, exports, toString$ = {}.toString;
  InputManager = (function(){
    InputManager.displayName = 'InputManager';
    var prototype = InputManager.prototype, constructor = InputManager;
    function InputManager(){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.mode = bind$(this$, 'mode', prototype);
      this$.rules = bind$(this$, 'rules', prototype);
      this$['import'] = bind$(this$, 'import', prototype);
      this$.modeStack = [];
      this$._rules = [];
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype['import'] = function(rules){
      var remaining, i$, len$, frame, lresult$, j$, ref$, len1$, rule, selector, ref1$, key$, results$ = [];
      remaining = [[[], rules]];
      for (i$ = 0, len$ = remaining.length; i$ < len$; ++i$) {
        frame = remaining[i$];
        lresult$ = [];
        for (j$ = 0, len1$ = (ref$ = frame[1]).length; j$ < len1$; ++j$) {
          rule = ref$[j$];
          if (toString$.call(rule.selector).slice(8, -1) === "Array") {
            selector = frame[0].concat(rule.selector);
            if (selector.length === 1 && selector[0][0] !== "!") {
              ((ref1$ = this._modeRules)[key$ = selector[0]] || (ref1$[key$] = [])).push(rule);
            }
            this._rules.push(rule);
            if (toString$.call(rule.subrules).slice(8, -1) === "Array") {
              lresult$.push(remaining.push([selector, rule.subrules]));
            }
          }
        }
        results$.push(lresult$);
      }
      return results$;
    };
    prototype.rules = function(){
      return this._rules;
    };
    prototype.mode = function(){
      return this.modeStack[this.modeStack.length - 1];
    };
    return InputManager;
  }());
  exports = module.exports = InputManager;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
