// Generated by LiveScript 1.2.0
(function(){
  var EE, Buffer, Selection, Poke, exports;
  EE = require('events').EventEmitter;
  Buffer = require('./buffer');
  Selection = require('./selection');
  Poke = (function(superclass){
    var prototype = extend$((import$(Poke, superclass).displayName = 'Poke', Poke), superclass).prototype, constructor = Poke;
    function Poke(){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$._recalcLastBufferIndex = bind$(this$, '_recalcLastBufferIndex', prototype);
      this$.removeBuffer = bind$(this$, 'removeBuffer', prototype);
      this$.switchBuffer = bind$(this$, 'switchBuffer', prototype);
      this$.createBuffer = bind$(this$, 'createBuffer', prototype);
      this$.buffers = [];
      this$._recalcLastBufferIndex();
      this$.activeBuffer = this$.createBuffer();
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.createBuffer = function(){
      var buffer;
      buffer = new Buffer(this, this._lastBufferIndex);
      this.buffers[buffer.index] = buffer;
      this._recalcLastBufferIndex();
      return buffer;
    };
    prototype.switchBuffer = function(buffer){
      if (~this.buffers.indexOf(buffer)) {
        return this.activeBuffer = buffer;
      } else {
        throw new Error("Bad Buffer (Not in list)");
      }
    };
    prototype.removeBuffer = function(buffer){
      if (~this.buffers.indexOf(buffer)) {
        this.buffers.splice(this.buffers.indexOf(buffer), 1);
        if (buffer === this.activeBuffer && buffer.index > 0) {
          this.activeBuffer = this.buffers[buffer.index - 1] || this.createBuffer();
        }
        return this._recalcLastBufferIndex();
      }
    };
    prototype._recalcLastBufferIndex = function(){
      var last, i$, ref$, len$, i, buffer;
      last = -1;
      for (i$ = 0, len$ = (ref$ = this.buffers).length; i$ < len$; ++i$) {
        i = i$;
        buffer = ref$[i$];
        if (buffer) {
          last = i;
        }
      }
      return this._lastBufferIndex = last + 1;
    };
    Poke.Buffer = Buffer;
    Poke.Selection = Selection;
    return Poke;
  }(EE));
  exports = module.exports = Poke;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
