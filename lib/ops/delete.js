// Generated by LiveScript 1.2.0
(function(){
  var OP, DeleteOP, exports;
  OP = require('./');
  DeleteOP = (function(){
    DeleteOP.displayName = 'DeleteOP';
    var prototype = DeleteOP.prototype, constructor = DeleteOP;
    function DeleteOP(x, y, length){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.x = x;
      this$.y = y;
      this$.length = length != null ? length : 1;
      this$.unapply = bind$(this$, 'unapply', prototype);
      this$.apply = bind$(this$, 'apply', prototype);
      if (this$.length === 'all') {
        this$.length = Infinity;
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.apply = function(buffer){
      var ref$, x, y, length, deleted, line;
      ref$ = buffer._parsePos(this.x, this.y), x = ref$[0], y = ref$[1];
      length = this.length;
      deleted = "";
      while (length > 0) {
        line = buffer.lines[y];
        if (length > line.length - x && buffer.lines.length - 1 > y) {
          length -= line.length - x + 1;
          deleted += line.substr(x) + "\n";
          buffer.lines[y] = line.substr(0, x) + buffer.lines[y + 1];
          buffer.lines.splice(y + 1, 1);
        } else {
          deleted += line.substr(x, x + length);
          buffer.lines[y] = line.substr(0, x) + line.substr(x + length);
          length = 0;
        }
      }
      line = buffer.lines[y];
      buffer.lines[y] = line.substr(0, x) + line.substr(x + length);
      return [x, y, deleted];
    };
    prototype.unapply = function(buffer, arg$){
      var x, y, deleted;
      x = arg$[0], y = arg$[1], deleted = arg$[2];
      return OP.insert(x, y, deleted).apply(buffer);
    };
    return DeleteOP;
  }());
  exports = module.exports = DeleteOP;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
