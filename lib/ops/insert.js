// Generated by LiveScript 1.2.0
(function(){
  var OP, InsertOP, exports, slice$ = [].slice;
  OP = require('./');
  InsertOP = (function(){
    InsertOP.displayName = 'InsertOP';
    var prototype = InsertOP.prototype, constructor = InsertOP;
    function InsertOP(x, y, lines){
      var this$ = this instanceof ctor$ ? this : new ctor$;
      this$.x = x;
      this$.y = y;
      this$.lines = lines;
      this$.unapply = bind$(this$, 'unapply', prototype);
      this$.apply = bind$(this$, 'apply', prototype);
      if (typeof this$.lines === 'string') {
        this$.lines = this$.lines.split(/[\n\r]/g);
      }
      return this$;
    } function ctor$(){} ctor$.prototype = prototype;
    prototype.apply = function(buffer){
      var ref$, x, y, lines, text, line;
      ref$ = buffer._parsePos(this.x, this.y), x = ref$[0], y = ref$[1];
      lines = this.lines.concat([]);
      text = lines[0];
      line = buffer.lines[y];
      buffer.lines[y] = line.substr(0, x) + text;
      if (lines.length > 1) {
        lines[1] += line.substr(x);
      } else {
        buffer.lines[y] += line.substr(x);
      }
      (ref$ = buffer.lines).splice.apply(ref$, [y + 1, 0].concat(slice$.call(this.lines.slice(1))));
      return [x, y];
    };
    prototype.unapply = function(buffer, arg$){
      var x, y;
      x = arg$[0], y = arg$[1];
      return OP['delete'](x, y, this.lines.join("\n").length).apply(buffer);
    };
    return InsertOP;
  }());
  exports = module.exports = InsertOP;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
}).call(this);
